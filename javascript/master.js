// [AIV_SHORT]  Build version: 0.0.27 - Sunday, April 26th, 2020, 3:17:13 PM  
 !function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e){function r(t,e){void 0===e&&(e=[]);var r="";for(var n in e)r+=","+n;r=r.substring(1),console.log(t+"("+r+")")}new(function(){function t(t,e,n){r("Minesweeper Constructor",[t,e,n]),this.rows=t,this.cols=e,this.mines=n,this.field=[],this.game_wrapper=document.getElementById("game");for(var o,i,s=0,l=0,u=this.mines;l<this.rows;){for(;s<this.cols;){var c=!1;u>0&&(this.randomBool(33)||this.rows*this.cols-(l*this.rows+s)===u)&&(o="Test Mine",console.log(o),c=!0,u--),this.field.push({x:s,y:l,mine:c,searched:!1});var a=document.createElement("div");a.classList.add("block"),a.setAttribute("data-x",s.toString()),a.setAttribute("data-y",l.toString()),this.game_wrapper.appendChild(a),s++}s=0,l++}i=this.field,console.log(i),this.setupEventHandlers()}return t.prototype.randomBool=function(t){return!!(100*Math.random()<=t)},t.prototype.setupEventHandlers=function(){for(var t=this,e=document.querySelectorAll(".block"),r=0;r<e.length;)e[r].addEventListener("click",(function(e){t.clickedBlock(e)})),r++},t.prototype.clickedBlock=function(t){r("clickedBlock",[t]);t.target;var e=this.getTileId(parseInt(t.target.getAttribute("data-x")),parseInt(t.target.getAttribute("data-y")));this.selectedTile=this.field[e],this.searchSurroundingTiles(this.selectedTile)},t.prototype.getTileId=function(t,e){return e*this.rows+t},t.prototype.searchSurroundingTiles=function(t){r("searchSurroundingTiles",[t])},t}())(10,10,30)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64, 